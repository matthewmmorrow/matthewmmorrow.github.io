{"version":3,"sources":["WordComponent.js","Colors.js","ColorButton.js","WordButton.js","CodeComponent.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["WordComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","style","color","code","word","Component","colorsReg","value","colorsRandom","buttonAudio","Audio","ColorButton","handleClick","bind","assertThisInitialized","play","onClick","unselected","backgroundColor","WordButton","CodeComponent","handleButtonClick","onValueChanged","_this2","buttons","Colors","map","isColor","src_ColorButton","src_WordButton","from","Timer","remaining","intervalHandle","tick","start","ended","startTime","Math","floor","Date","now","seconds","setInterval","clearInterval","timerEnded","getRemaining","setState","elapsed","index","round","segments","toConsumableArray","Array","keys","val","addBar","errorAudio","successAudio","App","seed","getSeed","codes","getCodes","hash","window","location","substr","terminal","parseInt","isNaN","random","selectedColorValue","selectedWordValue","isCorrect","handleColorSelected","handleWordSelected","ColorsRandom","wrapValue2","colorFrom","wrapValue","wordFrom","checkAnswer","answer","getAnswer","console","log","resetSelections","playSound","bottom","class","Fragment","src_CodeComponent","src_WordComponent","src_Timer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b033bdc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass WordComponent extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  finished() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"Word\" style={{color:this.props.code.color}}>{this.props.code.word}</div>\r\n  }\r\n}\r\n\r\nexport default WordComponent; // Donâ€™t forget to use export default!","let colors = [\r\n  {color: \"#FF4136\", word: \"RED\", value: 0},\r\n  {color: \"#FF851B\", word: \"ORANGE\", value: 1},\r\n  {color: \"#FFDC00\", word: \"YELLOW\", value: 2},\r\n  {color: \"#2ECC40\", word: \"GREEN\", value: 3},\r\n  {color: \"#0074D9\", word: \"BLUE\", value: 4},\r\n  {color: \"#B10DC9\", word: \"PURPLE\", value: 5},\r\n]\r\n\r\nlet colorsReg = [\r\n  {color: \"#FF0000\", word: \"RED\", value: 0},\r\n  {color: \"#FF6600\", word: \"ORANGE\", value: 1},\r\n  {color: \"#FFFF00\", word: \"YELLOW\", value: 2},\r\n  {color: \"#00FF00\", word: \"GREEN\", value: 3},\r\n  {color: \"#0000FF\", word: \"BLUE\", value: 4},\r\n  {color: \"#AA00FF\", word: \"PURPLE\", value: 5},\r\n]\r\n\r\nlet colorsRandom = [\r\n  colorsReg[2],\r\n  colorsReg[1],\r\n  colorsReg[5],\r\n  colorsReg[3],\r\n  colorsReg[0],\r\n  colorsReg[4],\r\n]\r\n\r\nexport {colorsRandom as ColorsRandom, colorsReg as Colors}\r\nexport default colorsReg","import React, { Component } from 'react';\r\n\r\nlet buttonAudio = new Audio(\"./button.wav\");\r\n\r\nclass ColorButton extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick() {\r\n    buttonAudio.play();\r\n    if(this.props.onClick){\r\n      this.props.onClick(this.props.color.value);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <button className={\"ColorButton\" + (this.props.unselected ? \" unselected\" : \"\")} style={{backgroundColor:this.props.color.color}} onClick={this.handleClick}>\r\n      \r\n    </button>\r\n  }\r\n}\r\n\r\nexport default ColorButton; // Donâ€™t forget to use export default!","import React, { Component } from 'react';\r\n\r\nlet buttonAudio = new Audio(\"./button.wav\");\r\n\r\nclass WordButton extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick() {\r\n    buttonAudio.play();\r\n    if(this.props.onClick){\r\n      this.props.onClick(this.props.color.value);\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return <button className={\"WordButton\" + (this.props.unselected ? \" unselected\" : \"\")} onClick={this.handleClick} >\r\n      {this.props.color.word}\r\n    </button>\r\n  }\r\n}\r\n\r\nexport default WordButton; // Donâ€™t forget to use export default!","import React, { Component } from 'react';\r\nimport Colors from './Colors';\r\nimport ColorButton from './ColorButton';\r\nimport WordButton from './WordButton';\r\n\r\nclass CodeComponent extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n  }\r\n\r\n  handleButtonClick(value){\r\n    if(this.props.onValueChanged){\r\n      this.props.onValueChanged(value);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let makeButton = (color) => {\r\n      let unselected = (this.props.value != null && this.props.value !== color.value);\r\n\r\n      if(this.props.isColor){\r\n        return <ColorButton color={color} unselected={unselected} onClick={this.handleButtonClick}/>\r\n      } else {\r\n        return <WordButton color={color} unselected={unselected} onClick={this.handleButtonClick}/>\r\n      }\r\n    }\r\n    let buttons = Colors.map(makeButton);\r\n\r\n    return <div className=\"Code\">\r\n      <div className=\"TerminalTitle\">From Terminal {this.props.from}</div>\r\n      {buttons}\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default CodeComponent; // Donâ€™t forget to use export default!","import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      remaining: null\r\n    };\r\n\r\n    this.intervalHandle = null;\r\n\r\n    this.tick = this.tick.bind(this);\r\n    this.start = this.start.bind(this);\r\n    this.ended = this.ended.bind(this);\r\n\r\n    this.start();\r\n  }\r\n\r\n  start(){\r\n    this.startTime = Math.floor(Date.now() / 1000 / this.props.seconds) * 1000 * this.props.seconds ;\r\n    this.intervalHandle = setInterval(this.tick, 50);\r\n  }\r\n\r\n  ended(){\r\n    clearInterval(this.intervalHandle);\r\n    if(this.props.timerEnded){\r\n      this.props.timerEnded();\r\n    }\r\n    this.start();\r\n  }\r\n\r\n  tick() {\r\n    let remaining = this.getRemaining();\r\n    this.setState({remaining: remaining});\r\n    if(remaining <= 0){\r\n      this.ended();\r\n    }\r\n  }\r\n\r\n  getRemaining(){\r\n    let elapsed = Date.now() - this.startTime;\r\n    let remaining = this.props.seconds - (elapsed / 1000);\r\n    return remaining;\r\n  }\r\n\r\n  addBar(index, remaining){\r\n    let className = \"TimerSegment\" + ( index >= remaining ? \" unselected\" : \"\")\r\n    return <div className={className}></div>;\r\n  }\r\n\r\n  render() {\r\n    var remaining = Math.round(this.state.remaining);\r\n    var segments = [...Array(10).keys()].map((val)=>this.addBar(val, remaining));\r\n    return (\r\n      <div className=\"TimerBar\">\r\n        {segments}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport WordComponent from './WordComponent';\nimport CodeComponent from './CodeComponent';\nimport {Colors, ColorsRandom} from './Colors';\nimport Timer from './Timer.js';\n\nlet errorAudio = new Audio(\"./chord.wav\");\nlet successAudio = new Audio(\"./tada.wav\");\n\n\n//Red, Orange, Yellow, Green, Blue, Purple\nclass App extends Component{\n  constructor(props) {\n    super(props);\n\n    let seed = this.getSeed()\n    let codes = this.getCodes(seed);\n\n    let hash = window.location.hash.substr(1);\n    let terminal = parseInt(hash);\n    if(isNaN(terminal) || terminal > 3 || terminal < 1)\n      terminal = Math.floor(Math.random() * 3) + 1;\n\n    this.state = {\n      terminal: terminal,\n      codes: codes,\n      seed: seed,\n      selectedColorValue: null,\n      selectedWordValue: null,\n      isCorrect: false\n    }\n\n\n    this.handleColorSelected = this.handleColorSelected.bind(this);\n    this.handleWordSelected = this.handleWordSelected.bind(this);\n    this.timerEnded = this.timerEnded.bind(this);\n  }\n\n  getSeed(){\n    return Math.floor(Date.now() / 30000);\n  };\n\n  getCodes(seed){\n    return [\n      {\n// placeholder\n      },\n      {\n        color: ColorsRandom[this.wrapValue2(seed+0)].color,\n        word: ColorsRandom[this.wrapValue2(seed+1)].word,\n      },\n      {\n        color: ColorsRandom[this.wrapValue2(seed+2)].color,\n        word: ColorsRandom[this.wrapValue2(seed+3)].word\n      },\n      {\n        color: ColorsRandom[this.wrapValue2(seed+4)].color,\n        word: ColorsRandom[this.wrapValue2(seed+5)].word\n      },\n    ];\n  }\n\n  getAnswer(terminal, codes){\n    let colorFrom = this.wrapValue(terminal + 1);\n    let wordFrom = this.wrapValue(terminal - 1);\n    let color = codes[colorFrom].color;\n    let word = codes[wordFrom].word;\n\n    return {\n      colorFrom: colorFrom,\n      wordFrom: wordFrom,\n      color: color,\n      word: word,\n    }\n  }\n\n  wrapValue(value){\n    if(value < 1){\n      return 3;\n    }\n    if(value > 3){\n      return 1;\n    }\n    return value;\n  }\n\n  wrapValue2(value){\n    return value = value % 6;\n  }\n\n  handleColorSelected(value){\n    this.setState({selectedColorValue: value});\n    this.checkAnswer(value, this.state.selectedWordValue);\n  }\n\n  handleWordSelected(value){\n    this.setState({selectedWordValue: value});\n    this.checkAnswer(this.state.selectedColorValue, value);\n  }\n\n  checkAnswer(selectedColorValue, selectedWordValue){\n    let answer = this.getAnswer(this.state.terminal, this.state.codes);\n    console.log(answer, this.state);\n\n    if(selectedColorValue == null || selectedWordValue == null){\n      return;\n    }\n    \n    let word = Colors[selectedWordValue].word;\n    let color = Colors[selectedColorValue].color;\n    if(answer.word === word && answer.color === color){\n      this.setState({isCorrect:true})\n      successAudio.play();\n    } else {\n      this.resetSelections(true);\n    }\n  }\n\n  resetSelections(playSound){\n    this.setState({selectedColorValue: null, selectedWordValue: null, isCorrect: false })\n    if(playSound){\n      errorAudio.play();\n    }\n  }\n\n  timerEnded() {\n    let seed = this.getSeed()\n    let codes = this.getCodes(seed);\n    this.setState({codes:codes, seed: seed});\n    let playSound = this.state.selectedColorValue != null || this.state.selectedWordValue != null\n    this.resetSelections(playSound);\n  }\n\n  render() {\n    let code = this.state.codes[this.state.terminal];\n    let answer = this.getAnswer(this.state.terminal, this.state.codes);\n\n    let bottom = <div class=\"Success\">Access Granted</div>;\n    if(!this.state.isCorrect){\n      bottom = <>\n        <CodeComponent isColor={true} from={answer.colorFrom} value={this.state.selectedColorValue} onValueChanged={this.handleColorSelected} />\n        <CodeComponent isColor={false} from={answer.wordFrom} value={this.state.selectedWordValue} onValueChanged={this.handleWordSelected}  />\n      </>;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"TerminalTitle\">Terminal {this.state.terminal}</div>\n        <WordComponent code={code} />\n        <Timer seconds=\"30\" timerEnded={this.timerEnded}></Timer>\n        {bottom}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}